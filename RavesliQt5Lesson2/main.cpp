#include <QTextStream> // интерфейс для чтения и записи текстовых данных

int main()
{
    QTextStream out(stdout);

    //Создаем строку типа QString
    QString a = "love";

    //Добавляем текст в конец строки
    a.append(" chess");

    //Добавляем текст в начало строки
    a.prepend("I ");

    //Выводим строку
    out<<a<<Qt::endl;

    //Выводим количество символов строки
    out<<"The a string has " <<a.count()<<" characters"<<Qt::endl;

    //Выводим всю строку в верхнем регистре
    out<<a.toUpper()<<Qt::endl;

    //Выводим всю строку в нижнем регистре
    out<<a.toLower()<<Qt::endl;

    //Методы a.toUpper и a.toLower не модифицируют исходную строку, а работают с её копией


    //Инициализация №1: Традиционный вариант
    QString str1 = "The night train";
    out<<str1<<Qt::endl;

    //Инициализация №2: Объектный способ
    QString str2("A yellow rose");
    out<<str2<<Qt::endl;

    //Инициализация №3: Инициализация строки с помощью средств Cтандартной библиотеки C++. Метод c_str() генерирует строку C-style. Данный массив символов, который является классическим способом представления строк в языке Си, может быть присвоен объекту класса QString:
    std::string s1 ="A blue sky";
    QString str3 = s1.c_str();
    out<<str3<<Qt::endl;

    //Инициализация №4: Мы конвертируем стандартную С++ строку в объект класса QString, используя метод fromLatin1(). Данный метод принимает указатель на массив символов, возвращаемый методом s2.data(). Второй параметр — это размер строки:
    std::string s2 = "A thick fog";
    QString str4 = QString::fromLatin1(s2.data(),s2.size());
    out<<str4<<Qt::endl;

    //Инициализация №5: А это строка в языке Cи, которая является массивом символов. Один из конструкторов класса QString может принимать массив символов в качестве параметра:
    char s3[] = "A deep forest";
    QString str5(s3);
    out<<str5<<Qt::endl;

    //Объект класса QString представляет собой последовательность QChar-«символов» (я специально взял в кавычки слово «символы»). Доступ к элементам строки можно получить c помощью оператора индексации [] или метода at(). В следующем примере мы будем выводить отдельные символы строки, которая является объектом класса QString:
    // Исходная строка
    QString b = "Eagle";

    // Выводим первый символ строки
    out << b[0] <<Qt::endl;

    // Выводим пятый символ строки
    out << b[4] << Qt::endl;

    // Выводим первый символ строки с помощью метода at()
    out << b.at(0) << Qt::endl;

    //Есть 3 метода, которые позволяют получить информацию о длине строки:

    //size();

    //count();

    //length();

    // Обычная строка
    QString st1 = "Eagle";

    // Здесь у нас символ новой строки
    QString st2 = "Eagle\n";

    // Здесь у нас пробел в конце строки
    QString st3 = "Eagle ";

    // А это вообще кириллица
    QString st4 = "орел";

    out << st1.length() << Qt::endl;
    out << st2.length() << Qt::endl;
    out << st3.length() << Qt::endl;
    out << st4.length() << Qt::endl;





    return 0;
}
